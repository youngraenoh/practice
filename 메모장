#<문자열 자료형>
; print("풍선")
; print("나비")
; print("ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ")
; print("ㅋ" *9)  -->문자열과 정수를 계산할 수 있음

; <boolean 자료형> --> 참과 거짓을 의미
; print(5 > 10)
; print(5 < 10)
; print(True)
; print(False)
; print(not True)
; print(not False)
; print(not(5>10))

<변수>
#애완동물을 소개해주세요~
# print("우리집 강아지의 이름은 연탄이에요")
# print("연탄이는 4살이며, 산책을 아주 좋아해요")
# print("연탄이는 어른일까요? True") # ----> 이럴 때 변수를 사용

# name = "연탄이"
# animal = "강아지"
# age = 4
# hobby = "산책"
# is_adult = age >= 4

# print("우리집 " + animal + "의 이름은 " + name + "에요")
# # print(name + "는 " + str(age) + "이며, " + hobby + "을 아주 좋아해요")
# print(name,"는 " , age , "이며, " , hobby ,"을 아주 좋아해요")  --> +대신 ,를 사용하면 숫자에 str붙일 필요 없음. 하지만 ,는 띄어쓰기를 포함함
# print(name + "는 어른일까요? " + str(is_adult))

<주석>
'''이렇게''' 이렇게 하면 주석 처리 됨

# Quiz) 변수를 이용하여 다음 문장을 출력하시오
# 변수명 : station
# 변수값 : "사당", "신도림", "인천공항" 순서대로 입력
# 출력문장 : XX행 열차가 들어오고 있습니다.
# 풀이
# station = "인천공항" or '사당' or "신도림"
# print(station + "행 열차가 들어오고 있습니다.")

<연산자>
print(2**3)
print(5%2)  -> 나머지
print(5//2)  -> 몫
print(10>3)
print(4>=7)
print(3==3)# -> 앞과 뒤의 값이 똑같은지 묻는 것
print(4+3==7)
print(1!=3)
print(3==3)# -> 앞과 뒤의 값이 똑같은지 묻는 것
print(4+3==7)
print(1!=3)
print(not(1!=3))
print((3>0) and (4<5))
print((3>0) & (4<5))
print((3>0) or (0>1))
print((3>0) | (0>1))
print(5>4>3)

<간단한 수식>
number = 2 + 3 * 4 
print(number)
# number = number + 2
print(number)
# number += 2  #위에 것과 완벽하게 같은 표현
number /= 2
print(number)
number *= 2
print(number)
number -= 2
print(number)
number %= 5
print(number)

<숫자처리 함수>
print(abs(-5))
print(pow(4, 2))
print(max(5, 12))
print(min(5, 12))
print(round(3.14))

from math import *
print(floor(4.99))
print(ceil(4.11))
print(sqrt(16))

<랜덤 함수>
from random import *
# print(random())  #0.0이상 1미만의 숫자 생성
# print(random() * 10)  #0이상 10미만의 숫자 생성
# print(int(random() * 10))
# print(int(random() * 10) + 1) #1이상 10미만의 숫자 생성성

# print(int(random() * 45) + 1) #1이상 45이하의 임의의 값
# print(int(random() * 45) + 1)
# print(int(random() * 45) + 1)
# print(int(random() * 45) + 1)
# print(int(random() * 45) + 1)
# print(int(random() * 45) + 1)

# print(randrange(1, 46))
# print(randint(1, 45))
# print(randint(1, 45))
# print(randint(1, 45))
# print(randint(1, 45))
# print(randint(1, 45))
# print(randint(1, 45))

<퀴즈>
당신은 최근에 코딩 스터디 모임을 새로 만들었습니다.
월 4회 스터디를 하는데 3번은 온라인으로 하고 1번은 오프라인으로 하기로 했습니다.
아래 조건에 맞는 오프라인 모임 날짜를 정해주는 프로그램을 작성하시오.

조건1 ; 랜덤으로 날짜를 뽑아야 함
조건2 ; 월별 날짜는 다름을 감안하여 최소 일수인 28 이내로 정함
조건3 ; 매월 1~3일은 스터디 준비를 해야하므로 제외

출력문 예제
오프라인 스터디 모임 날짜는 매월 x 일로 선정되었습니다.

<풀이>
from random import *
date = int(random() * 28 + 4)
print("오프라인 스터디 모임 날짜는 매월 " + str(date) + "일로 선정되었습니다.") or randint나 randrange 사용

<문자열>
sentence = '나는 소년입니다.'
print(sentence)
sentence2 = '파이썬은 쉬워요'
print(sentence2)
sentence3 = """
나는 소년이고,
파이썬은 쉬워요
"""
print(sentence3)

<슬라이싱>
슬라이싱이란 내가 필요한 정보만 뽑아서 쓰겠다는 것
jumin = "940820-1234567"
print("성별 : " + jumin[7])
print("연 : " + jumin[0:2])
print("월 : " + jumin[2:4])
print("일 : " + jumin[4:6])
print("생년월일 : " + jumin[:6])
print("뒤 7자리 : " + jumin[7:])
print("뒤 7자리(뒤에서부터) : " + jumin[-7:])

<문자열 처리 함수>
python = "Python is Amazing"
print(python.lower())
print(python.upper())
print(python[0].isupper())
print(len(python))
print(python.replace("Python", "Java"))

index = python.index("n")
print(index)
index = python.index("n", index + 1)
print(index)

print(python.find("n")) # --> 찾고자하는 글자가 없다면 -1이 나옴
print(python.count("n"))

<문자열 포맷>
# # print("a" + "b")
# # print("a", "b")
# print("나는 %d살입니다." %20) #d는 정수를 의미
# print("나는 %s을 좋아해요" %"파이썬") #s는 string을 의미
# print("Apple은 %c로 시작해요" % "A")
# #참고로 %s는 문자, 정수 다 됨
# print("나는 %s살입니다." %20)
# print("나는 %s과 %s을 좋아해요" %("파란색", "빨간색"))

#방법 2
# print("나는 {}살입니다.".format(20))
# print("나는 {}색과 {}색을 좋아해요".format("빨간", "파란"))
# print("나는 {0}색과 {1}색을 좋아해요".format("빨간", "파란"))
# print("나는 {1}색과 {0}색을 좋아해요".format("빨간", "파란"))

# #방법 3
# print("나는 {age}살이며, {color}색을 좋아애효".format(age = 20, color = "빨간"))
# print("나는 {age}살이며, {color}색을 좋아애효".format(color = "빨간", age = 20 ))

#방법 4(파이썬 버전 3.6부터 가능)
age = 20
color = "빨간"
print(f"나는 {age}살이며, {color}색을 좋아해요")

<탈출 문자>
# print("백문이 불여일견\n백견이 불여일타") #-> \n줄바꿈해서 작성해달라는 의미
# print("저는 '나도코딩'입니다.")
# print('저는 "나도코딩"입니다.')
# print("저는 \"나도코딩\"입니다.")
# print("C:\\Users\\NYR\Desktop\\Python work space>")
#\r ;커서를 맨 앞으로 이동
# print("Red Apple\rPine")
# \b ; 백스페이스역할(한 글자 삭제)
# print("Redd\bApple")
# \t; 탭 역할
# print("Red\tApple")

<퀴즈>
사이트별로 비밀번호를 만들어주는 프로그램을 작성하시오
예) http://naver.com
규칙 1 : http:// 부분은 제외 => naver.com
규칙 2 : 처음 만나는 점(.) 이후 부분은 제외 -> naver
규칙 3 : 남은 글자 중 처음 세자리 + 글재 개수 + 글자 내 'e' 개수 + "!"로 구성
예) 생성된 비밀번호 : nav51!

<풀이>
url = "http://naver.com"
my_str = url.replace("http://", "")
print(my_str)
my_str = my_str[:my_str.index(".")]
print(my_str)
password = my_str[:3] + str(len(my_str)) + str(my_str.count("e")) + "!"
print("{0}의 비밀번호는 {1}입니다.".format(url, my_str))

<리스트>
#리스트 []

#지하철 칸 별로 10명, 20명, 30명
# subway1 = 10
# subway2 = 20
# subway3 = 30
# #리스트를 사용함으로써 변수에 여러개 저장
# subway = [10, 20, 30]
# print(subway)

# subway = ["유재석", "조세호", "박명수"]
# print(subway)
# print(subway.index("조세호"))
# subway.append("하하")
# print(subway)
# subway.insert(1, "정형돈")
# print(subway)
# print(subway.pop())
# print(subway)
# subway.append("유재석")
# print(subway)
# print(subway.count("유재석"))

#정렬
num_list = [5,2,4,3,1]
num_list.sort()
print(num_list)

#뒤집기도 가능
num_list.reverse()
print(num_list)

#모두 지우기
num_list.clear()
print(num_list)

#다양한 자료형 함께 사용
num_list = [5,2,4,3,1]
mix_list = ["조세호", 20, True]
# print(mix_list)
num_list.extend(mix_list)
print(num_list)

<사전>
#사전은 키에 대한 중복을 허용하지X
# cabinet = {3:"유재석", 100 : "김태호"} #{key, value}
# print(cabinet[3])
# print(cabinet[100])
# print(cabinet.get(3))
# print(cabinet.get(5, "사용가능"))
# print("hi")
# print(3 in cabinet)
# print(5 in cabinet)

cabinet = {"A-3":"유재석", "B-100" : "김태호"}
print(cabinet)
cabinet["C-20"] = "조세호"
cabinet["A-3"] = "김종국"
print(cabinet)
del cabinet["A-3"]
print(cabinet)
#key들만 출력
print(cabinet.keys())
#value들만 출력
print(cabinet.values())
#key와 value모두 출력
print(cabinet.items())
cabinet.clear()
print(cabinet)

<튜플>
menu = ("돈까스", "생선까스")
print(menu[0])
print(menu[1])
#튜플은 추가하거나 빼는 것이 안 됨

(name, age, hobby) = ("김종국", 20, "코딩")
print(name, age, hobby)

<세트>
#중복이 안 되고 순서가 없음
my_set = {1,2,3,3,3}
print(my_set)

java = {"유재석", "김태호", "양세형"}
python = set(["유재석", "박명수"])

#교집합(java와 python을 모두 할 수 있는 사람)
print(java & python)
print(java.intersection(python))

#합집합
print(java | python)
print(java.union(python))

#차집합
print(java - python)
print(java.difference(python))

#파이썬을 할 줄 아는 사람이 늘어남
python.add("김태호")
print(python)

#java를 까먹었음
java.remove("김태호")
print(java)

<자료구조의 변경>
menu = {"커피", "우유", "주스"}
print(menu, type(menu))

menu = list(menu)
print(menu, type(menu))

menu = tuple(menu)
print(menu, type(menu))

menu = set(menu)
print(menu, type(menu))

<퀴즈>
당신의 학교에서는 파이썬 코딩 대회를 주최합니다.
참석율을 높이기 위해 댓글 이벤트를 진행하기로 하였습니다.
댓글 작성자들 중에 추첨을 통해 1명은 치킨, 3명은 커피 쿠폰을 받게 됩니다.

조건1 ; 편의상 댓글은 20명이 작성하였고 아이디는 1~20이라고 가정
조건2 : 댓글 내용과 상관 없이 무작위로 추첨하되 중복 불가
조건3 : random 모듈의 shuffle과 sample을 활용

(출력 예제)
-- 당첨자 발표 --
치킨 당첨자 : 1
커피 당첨자 : [2,3,4]
-- 축하합니다 --

(활용 예제)
from random import *
lst = [1,2,3,4,5]
print(lst)
shuffle(lst)
print(lst)
print(sample(lst, 1))

<풀이>
from random import *
users = range(1, 21)
users = list(users)
print(users)
shuffle(users)
print(users)
winners = sample(users, 4)
print(winners)
print("--당첨자 발표--")
print("치킨 당첨자 : {0}".format(winners[0]))
print("커피 당첨자 : {0}".format(winners[1:]))
print("--축하합니다--")

<if>
weather = "비"
if weather == "비" or weather == "눈" :
    print("우산을 챙기세요")
elif weather == "미세먼지" :
    print("마스크를 챙기세요")
else :
    print("준비물이 필요 없어요")
or
weather = input("오늘 날씨는 어때요?")
if weather == "비" :
    print("우산을 챙기세요")
elif weather == "미세먼지" :
    print("마스크를 챙기세요")
else :
    print("준비물이 필요 없어요")

temp = int(input("기온은 어때요? "))
if 30 <= temp :
    print("너무 더워요. 나가지 마세요")
elif 10 <= temp and temp < 30 :
    print("괜찮은 날씨에요")
elif 0 <= temp and temp < 10 :
    print("외투를 챙기세요")
else :
    print("너무 추워요. 나가지 마세요")

<반복문>
# for waiting_no in [0, 1, 2, 3, 4] :
#     print("대기번호 : {0}".format(waiting_no))

# for waiting_no in range(5) :
#     print("대기번호 : {0}".format(waiting_no))

for waiting_no in range(1, 6) :
    print("대기번호 : {0}".format(waiting_no))

starbucks = ["아이언맨", "토르", "아이엠 그루트"]
for customers in starbucks :
    print("{0}, 커피가 준비되었습니다.".format(customers))

<while>
customer = "토르"
index = 5
while index >= 1 :
    print("{0}, 커피가 준비되었습니다. {1}번 남았어요".format(customer, index))
    index -= 1
    if index == 0 :
        print("커피는 폐기처분되었습니다.")

--> 무한 루프
customer = "아이언맨"
index = 1
while True :
    print("{0}님 커피가 준비되었습니다. 호출 {1}회 ".format(customer, index))
    index += 1

customer = "토르"
person = "unknown"
while customer != project :
    print("{0}님 커피가 준비되었습니다.".format(customer))
    project = input("이름이 어떻게 되세요?")

<continue와 break>
absent = [2, 5]
for student in range(1, 11) :
    if student in absent :
        continue
    print("{0}번 책을 읽어봐".format(student))

absent = [2, 5]
no_book = [7]
for student in range(1, 11) :
    if student in absent :
        continue
    elif student in no_book :
        print("오늘 수업은 여기까지. {0}번은 교무실로 따라와".format(no_book))
        break
    print("{0}번 책을 읽어봐".format(student))

<한 줄 for>
# students = [1,2,3,4,5]
# print(students)
# students = [i + 100 for i in students]
# print(students)

students = ["Iron man", "Thor", "I am groot"]
students = [len(i) for i in students]
print(students)

students = ["Iron man", "Thor", "I am groot"]
students = [i.upper() for i in students]
print(students)

<퀴즈5>
당신은 카카오 서비스를 이용하는 택시 기사입니다.
50명의 승객과 매칭 기회가 있을 때, 총 탑승 승객 수를 구하는 프로그램을 작성하시오
조건 1 : 승객별 운행 소요 시간은 5분 ~ 50분 사이의 난수로 정해집니다.
조간 2 : 당신은 소요 시간 5분 ~ 15분 사이이 승객만 매칭해야 합니다.
 (출력문 예제)
 [O] 1번 째 손님 (소요시간 : 15분)
 [ ] 2번 째 손님 (소요시간 : 50분)
 [O] 3번 째 손님 (소요시간 : 5분)
 ...
 [ ] 50번 째 손님 (소요시간 : 16분)
총 탑승 승객 : 2분

<풀이>
from random import *
cnt = 0 # 총 탑승 승객 수 
for i in range(1, 51) :
    time = randrange(5, 51)
    if 5 <= time <= 15 :
        print("[O] {0}번 째 손님 (소요시간 : {1}분)".format(i, time))
        cnt += 1
    else :
        print("[ ] {0}번 째 손님 (소요시간 : {1}분)".format(i, time))

print("총 탑승 승객 : {0}".format(cnt))

<함수>
def open_account() :
    print("새로운 계좌가 생성되었습니다.")

def deposit(balance, money) :
    print("입금이 완료되었습니다. 잔액은 {0}원입니다.".format(balance + money))
    return balance + money

def withdraw(balance, money) :
    if balance >= money :
        print("출금이 완료되었습니다. 잔액은 {0}원입니다.".format(balance - money))
        return balance - money
    else :
        print("출금이 완료되지 않았습니다. 잔액은 {0}원입니다.".format(balance))
        return balance
    
def withdraw_night(balance, money) : #저녁에 출금
    commission = 100
    return commission, balance - money - commission  #두 개의 값을 반환

balance = 0
balance = deposit(balance, 1000)
# balance = withdraw(balance, 2000)
# balance = withdraw(balance, 500)
# print(balance)
commission, balance = withdraw_night(balance, 500)
print("수수료는 {0}원이며, 잔액은 {1}원입니다.".format(commission, balance))

<기본값>
# def profile(name, age, main_lang) :
#     print("이름 : {0}\t나이 : {1}\t주 사용 언어 : {2}"\
#           .format(name, age, main_lang))
# profile("유재석", 20, "파이썬")
# profile("김태호", 25, "자바")

#같은 학교 같은 학년 같은 반 같은 수업.
def profile(name, age=17, main_lang = "파이썬") :
    print("이름 : {0}\t나이 : {1}\t주 사용 언어 : {2}"\
          .format(name, age, main_lang))
profile("유재석")
profile("김태호")

<키워드 값>
def profile(name, age, main_lang) :
    print(name, age, main_lang)

profile(name = "유재석", main_lang = "파이썬", age = 20)
profile(main_lang = "자바", age = 25, name = "김태호")  #키워드를 이용해서 값을 넣어주면 순서가 뒤섞여 있어도 제대로 됨.

<가변인자>
# def profile(name, age, lang1, lang2, lang3, lang4, lang5) :
#     print("이름 : {0}\t나이 : {1}\t".format(name, age), end = " ")
#     print(lang1, lang2, lang3, lang4, lang5)

profile("유재석", 20, "Python", "Java", "C", "C++", "C#")
profile("김태호", 25, "Kotlin", "Swift", "", "", "")

def profile(name, age, *language) :
    print("이름 : {0}\t나이 : {1}\t".format(name, age), end = " ")
    for lang in language :
        print(lang, end = " ")
    print()



profile("유재석", 20, "Python", "Java", "C", "C++", "C#", "JavaScript")
profile("김태호", 25, "Kotlin", "Swift")

<지역변수와 전역변수>
#지역변수는 함수 내에서만 쓸 수 있는 것.
#전역변수는 프로그램 내에서 어디든지 부를 수 있는 것.
gun = 10

def checkpoint(soldiers) :
    gun = 20
    gun = gun - soldiers
    print("[함수 내]남은 총 : {0}".format(gun))

print("전체 총 : {0}".format(gun))
checkpoint(2)
print("남은 총 : {0}".format(gun))

gun = 10

def checkpoint(soldiers) :
    global gun
    gun = gun - soldiers
    print("[함수 내]남은 총 : {0}".format(gun))

print("전체 총 : {0}".format(gun))
checkpoint(2)
print("남은 총 : {0}".format(gun))

gun = 10

def checkpoint(soldiers) :
    global gun
    gun = gun - soldiers
    print("[함수 내]남은 총 : {0}".format(gun))

def checkpoint_ret(gun, soldiers) :
    gun = gun - soldiers
    print("[함수 내]남은 총 : {0}".format(gun))
    return gun

print("전체 총 : {0}".format(gun))
# checkpoint(2)
gun = checkpoint_ret(gun, 2)
print("남은 총 : {0}".format(gun))

<Quiz>
표준 체중을 구하는 프로그램을 작성하시오
* 표준 체중 : 각 개인의 키에 적당한 체중
(성별에 따른 공식)
남자 : 키(m) X 키(m) x 22
여자 : 키(m) x 키(m) x 21

조건 1 : 표준 체중은 별도의 함수 내에서 계산
*함수명 : std_weight
*전달값 : 키(height), 성별(gender)
조건 2 : 표준 체중은 소수점 둘째자리까지 표시
(출력 예시)
키 175cm 남자의 표준 체중은 67.38kg입니다.

<풀이>
def std_weight(height, gender) :
    if gender == "남자" :
        return height * height * 22
    else :
        return height * height * 21

height = 175
gender = "남자"
weight = round(std_weight(height/100, gender), 2)
print("키 {0}cm {1}의 표준 체중은 {2}kg입니다.".format(height, gender, weight))

<표준 입출력>
# print("Python", "Java", sep = ",")
# print("Python", "Java", sep = " vs ")
# print("Python", "Java", "JavaScript", sep = " vs ")
# print("Python", "Java", sep = ",", end = "?") 
# print("무엇이 더 재밌을까요?")
# import sys
# print("Python", "Java", file = sys.stdout) #stdout은 표준 출력으로 문장이 찍힘
# print("Python", "Java", file = sys.stderr) #stderr은 표준 에러로 처리됨.

# scores = {"수학" : 0, "영어" : 50, "코딩" : 100}
# for subject, score in scores.items() :
#     # print(subject, score)
#     print(subject.ljust(8), str(score).rjust(4), sep = ":")

#은행 대기순번표
# for num in range(1, 21) :
#     print("대기번호 : " + str(num).zfill(3))

answer = input("아무 값이나 입력하세요 : ")  #사용자 지정을 할 때는 항상 문자열 형태로 저장됨.
print("입력하신 값은 " + answer + "입니다.")

<다양한 출력 포맷>
#빈 자리는 빈공간으로 두고, 오른쪽 정렬을 하되, 총 10자리 공간을 확보
print("{0: >10}".format(500))
#양수일 때 +를 표시, 음수일 땐 -로 표시
print("{0: >+10}".format(-500))
print("{0: >+10}".format(+500))
#왼쪽 정렬을 하고, 빈칸으로 _로 채움
print("{0:_<+10}".format(500))
#3자리 마다 콤마를 찍어주기
print("{0:,}".format(100000000000))
#3자리 마다 콤마를 찍어주기, +-부호도 붙이기
print("{0:+,}".format(+100000000000))
print("{0:+,}".format(-100000000000))
##3자리 마다 콤마를 찍어주기, +-부호도 붙이고, 30만큼 자릿수 확보하기
#돈이 많으면 행복하니깐 빈 자리는 ^로 채워주기, 왼쪽 정렬
print("{0:^<+30,}".format(10000000000000000000))
#소수점 출력
print("{0:f}".format(5/3))
#소수점 특정 자릿수까지만 표시 (소수점 셋 째 자리에서 반올림)
print("{0:.2f}".format(5/3))
<파일 입출력>
score_file = open("score.txt", "w", encoding = "utf8")
print("수학 : 0", file=score_file)
print("영어 : 50", file=score_file)
score_file.close()

score_file = open("score.txt", "a", encoding = "utf8") -> a는 append를 의미함
score_file.write("과학 : 80")
score_file.write("\n코딩 : 100")
score_file.close()

# score_file = open("score.txt", "r", encoding = "utf8")
# print(score_file.read())
# score_file.close()

# score_file = open("score.txt", "r", encoding = "utf8")
# print(score_file.readline(), end = "") #줄별로 읽기, 한 줄 읽고 커서는 다음 줄로 이동
# print(score_file.readline(), end = "")
# print(score_file.readline(), end = "")
# print(score_file.readline(), end = "")
# score_file.close()

#파일이 몇 줄인지 모를 때는 반복문을 통해서 파일을 불러올 수 있다.
# score_file = open("score.txt", "r", encoding = "utf8")
# while True :
#     line = score_file.readline()
#     if not line :
#         break
#     print(line, end = "")
# score_file.close()

#list 형태로 저장
score_file = open("score.txt", "r", encoding = "utf8")
lines = score_file.readlines() #list 형태로 저장
for line in lines :
    print(line, end = "")

score_file.close()

<pickle>
import pickle
# profile_file = open("profile.pickle", "wb") #피클에서는 binary를 꼭 넣어줘야 함
# profile = {"이름":"박명수", "나이":30, "취미":["축구", "골프", "코딩"]}
# print(profile)
# pickle.dump(profile, profile_file) -> 파일에 있는 정보를 profile에 불러오기
# profile_file.close()

profile_file = open("profile.pickle", "rb")
profile = pickle.load(profile_file) #파일에 있는 정보를 profile에 불러오기
print(profile)
profile_file.close()

<with>
# import pickle
# with open("profile.pickle", "rb") as profile_file :
#     print(pickle.load(profile_file))

with open("study.txt", "w", encoding = "utf8") as study_file :
    study_file.write("파이썬을 열심히 공부하고 있어요")

with open("study.txt", "r", encoding = "utf8") as study_file :
    print(study_file.read())

<퀴즈>
당신의 회사에서는 매주 1회 작성해야 하는 보고서가 있습니다.
보고서는 항상 아래와 같은 형태로 출력되어야 합니다. 
 
- x주차 주간보고 -
부서 :
이름 :
업무 요약 :
 1주차부터 50주차까지의 보고서 파일을 만드는 프로그램을 작성하시오.

 조건 : 파일명은 '1주차.txt', '2주차.txt', ... 와 같이 만듭니다.

 <풀이>
 for week in range(1, 51) :
    with open(str(week) + "주차.txt", "w", encoding = "utf8") as report_file :
        report_file.write(" - {0}주차 주간보고 - ".format(week))
        report_file.write("\n부서 : ")
        report_file.write("\n이름 : ")
        report_file.write("\n업무 요약 : ")

<클래스> -> 틀 같은 것. 유닛을 일일이 다 만들 수 없으니 틀에다 찍어내자!
; name = "마린"
# hp = 40
# damage = 5 #유닛의 공격력

# print("{} 유닛이 생성되었습니다.".format(name))
# print("체력 {0}, 공격력 {1}\n".format(hp, damage))

# tank_name = "탱크"
# tank_hp = 150
# tank_damage = 35

# print("{} 유닛이 생성되었습니다.".format(tank_name))
# print("체력 {0}, 공격력 {1}\n".format(tank_hp, tank_damage))

# tank2_name = "탱크"
# tank2_hp = 150
# tank2_damage = 35

# print("{} 유닛이 생성되었습니다.".format(tank2_name))
# print("체력 {0}, 공격력 {1}\n".format(tank2_hp, tank2_damage))

# def attack(name, location, damage) :
#     print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]".format(\
#         name, location, damage))
    
# attack(name, "1시", damage)
# attack(tank_name, "1시", tank_damage)
# attack(tank2_name, "1시", tank2_damage)

class Unit :
    def __init__(self, name, hp, damage) :
        self.name = name
        self.hp = hp
        self.damage = damage
        print("{0} 유닛이 생성되었습니다.".format(self.name))
        print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))

marine1 = Unit("마린", 40, 5)
marine2 = Unit("마린", 40, 5)
tank = Unit("탱크", 150, 35)
#하나의 클래스를 통해서 서로 다른 마린과 탱크를 만들 수 있었다.

<__init__>
    def __init__(self, name, hp, damage) :
        self.name = name
        self.hp = hp
        self.damage = damage
        print("{0} 유닛이 생성되었습니다.".format(self.name))
        print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))

marine1 = Unit("마린", 40, 5)
marine2 = Unit("마린", 40, 5)
tank = Unit("탱크", 150, 35)
#하나의 클래스를 통해서 서로 다른 마린과 탱크를 만들 수 있었다.
#클래스로부터 만들어지는 것을 객체라고 함. 마린과 탱크는 유닛 클래스의 instance

<멤버 변수>
클래스 내에서 정의된 변수. 
class Unit :
    def __init__(self, name, hp, damage) :
        self.name = name
        self.hp = hp
        self.damage = damage
        print("{0} 유닛이 생성되었습니다.".format(self.name))
        print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))

# marine1 = Unit("마린", 40, 5)
# marine2 = Unit("마린", 40, 5)
# tank = Unit("탱크", 150, 35)

wraith1 = Unit("레이스", 80, 5)
print("유닛 이름 : {0}, 공격력 : {1}".format(wraith1.name, wraith1.damage)) -> 클래스 
외부에서도 멤버 변수를 이렇게 해서 사용할 수 있다.

wraith2 = Unit("빼앗은 레이스", 80, 5)
wraith2.clocking = True  -> 외부에서 clocking이라는 변수를 추가로 할당

if wraith2.clocking == True :
    print("{0} 는 현재 클로킹 상태입니다.".format(wraith2.name))

if wraith1.clocking == True :
    print("{0} 는 현재 클로킹 상태입니다.".format(wraith2.name))

<매소드>
class Unit :
    def __init__(self, name, hp, damage) :
        self.name = name
        self.hp = hp
        self.damage = damage
        print("{0} 유닛이 생성되었습니다.".format(self.name))
        print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))


#공격 유닛
class AttackUnit :
    def __init__(self, name, hp, damage) :
        self.name = name
        self.hp = hp
        self.damage = damage
   

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]"\
              .format(self.name, location, self.damage))

              
        
    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {1}입니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))

            
            
firebat1 = AttackUnit("파이어뱃", 50, 16)
firebat1.attack("5시")

firebat1.damaged(25)
firebat1.damaged(25)

<상속>
# 일반 유닛
class Unit :
    def __init__(self, name, hp) :
        self.name = name
        self.hp = hp

class AttackUnit(Unit):
    def __init__(self, name, hp, damage) :
        Unit.__init__(self, name, hp)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]".format\
              (self.name, location, self.damage))

    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {0}입니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))

firebat1 = AttackUnit("파이어뱃", 50, 16)
firebat1.attack("5시")
firebat1.damaged(25)
firebat1.damaged(25)

<다중 상속>
# 일반 유닛
class Unit :
    def __init__(self, name, hp) :
        self.name = name
        self.hp = hp

class AttackUnit(Unit):
    def __init__(self, name, hp, damage) :
        Unit.__init__(self, name, hp)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]".format\
              (self.name, location, self.damage))

    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {0}입니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))

class Flyable :
    def __init__(self, flying_speed) :
        self.flying_speed = flying_speed

    def fly(self, name, location) :
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]".format\
              (name, location, self.flying_speed))
        

#공중 공격 유닛 클래스
class FlyableAttackUnit(AttackUnit, Flyable) :
    def __init__(self, name, hp, damage, flying_speed) :
        AttackUnit.__init__(self, name, hp, damage)
        Flyable.__init__(self, flying_speed)

#발키리 : 공중 고격 유닛, 한번에 14발 미사일 발사
valkyrie = FlyableAttackUnit("발키리", 200, 6, 5)
valkyrie.fly(valkyrie.name, "3시")

<메소드 오버라이딩>

# 일반 유닛
class Unit :
    def __init__(self, name, hp, speed) :
        self.name = name
        self.hp = hp
        self.speed = speed

    def move(self, location) : 
        print("[지상 유닛 이동]")
        print("{0} : {1} 방향으로 이동합니다. [속도 {2}]".format\
              (self.name, location, self.speed))

class AttackUnit(Unit):
    def __init__(self, name, hp, speed, damage) :
        Unit.__init__(self, name, hp, speed)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]".format\
              (self.name, location, self.damage))

    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {0}입니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))

class Flyable :
    def __init__(self, flying_speed) :
        self.flying_speed = flying_speed

    def fly(self, name, location) :
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]".format\
              (name, location, self.flying_speed))
        

#공중 공격 유닛 클래스
class FlyableAttackUnit(AttackUnit, Flyable) :
    def __init__(self, name, hp, damage, flying_speed) :
        AttackUnit.__init__(self, name, hp, 0, damage) #지상 스피드는 0
        Flyable.__init__(self, flying_speed)

    def move(self, location) :
        print("[공중 유닛 이동]")
        self.fly(self.name, location)

#발키리 : 공중 고격 유닛, 한번에 14발 미사일 발사
valkyrie = FlyableAttackUnit("발키리", 200, 6, 5)
valkyrie.fly(valkyrie.name, "3시")

#벌쳐
vulture = AttackUnit("벌쳐", 80, 10, 20)

#배틀크루져 
battlecruiser = FlyableAttackUnit("배틀크루져", 500, 25, 3)

vulture.move("11시")
# battlecruiser.fly(battlecruiser.name, "9시")
battlecruiser.move("9시")

<pass>
class Unit :
    def __init__(self, name, hp, speed) :
        self.name = name
        self.hp = hp
        self.speed = speed

    def move(self, location) :
        print("{0} : {1} 방향으로 이동합니다. [속도 {2}]".\
              format(self.name, location, self.speed))


class AttackUnit(Unit) :
    def __init__(self, name, hp, speed, damage) :
        Unit.__init__(self, name, speed, hp)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]".\
              format(self.name, location, self.damage))
        
    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {0}입니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))

class Flyable :
    def __init__(self, flying_speed) :
        self.flying_speed = flying_speed
    
    def fly(self, name, location) :
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]".\
              format(name, location, self.flying_speed))
        
class FlyableAttackUnit(AttackUnit, Flyable) :
    def __init__(self, name, hp, damage, flying_speed) :
        AttackUnit.__init__(self, name, hp, 0, damage)
        Flyable.__init__(self, flying_speed)

    def move(self, location) :
        print("[공중 유닛 이동]")
        self.fly(self.name, location)

vulture = AttackUnit("벌쳐", 80, 10, 20)

battlecruiser = FlyableAttackUnit("배틀크루저", 500, 25, 3)

vulture.move("1시")
# battlecruiser.fly(battlecruiser.name, "9시")
battlecruiser.move("9시")


class BuildingUnit(Unit) :
    def __init__(self, name, hp, location) :
        pass

supply_depot = BuildingUnit("서플라이 디폿", 500, "7시")

def game_start() :
    print("[알림] 새로운 게임을 시작합니다.")

def game_over() :
    pass


game_start()
game_over()

<super>
class Unit :
    def __init__(self) :
        print("Unit 생성자")

class Flyable :
    def __init__(self) :
        print("Flyable 생성자")

class FlyableUnit(Flyable, Unit) :
    def __init__(self) :
        #super().__init__()
        Unit.__init__(self)
        Flyable.__init__(self)

#드랍쉽
dropship = FlyableUnit()  -> 다중 상속은 super 사용 불가
---------------------------------
<스타크래프트 전반전>
class Unit :
    def __init__(self, name, hp, speed) :
        self.name = name
        self.hp = hp
        self.speed = speed
        print("{0} 유닛이 생성되었습니다.".format(self.name))

    def move(self, location) :
        print("[유닛이 이동합니다.]")
        print("{0} : {1} 방향으로 이동합니다. [속력 : {2}]".\
              format(self.name, location, self.speed))
        
    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 체력이 {1} 남았습니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))
     

class AttackUnit(Unit) :
    def __init__(self, name, hp, damage, speed) :
        Unit.__init__(self, name, hp, speed)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]".\
              format(self.name, location, self.damage))
        
class Marine(AttackUnit) :
    def __init__(self) :
        AttackUnit.__init__("마린", 40, 5, 1)

    def stimpack(self) :
        if self.hp > 10 :
            self.hp -= 10
            print("{0} : 스팀팩을 사용합니다. (HP 10 감소)".format(self.name))
        else :
            print("{0} : 체력이 부족하여 스팀팩을 사용하지 않습니다.".format(self.name))

class Tank(AttackUnit) :
    seize_developed = False
    def __init__(self) :
        AttackUnit.__init__("탱크", 150, 35, 1)
        self.seize_mode = False

    def set_seize_mode(self) :
        if Tank.seize_mode == False :
            print("{0} : 시즈 모드로 전환합니다.".format(self.name))
            self.damage *= 2
            self.seize_mode = True
        else :
            print("{0} : 시즈 모드를 해제합니다.".format(self.name))
            self.damage /= 2
            self.seize_mode = False



class Flyable() :
    def __init__(self, flying_speed) :
        self.flying_speed = flying_speed

    def fly(self, name, location) :
        print("{0} : {1} 방향으로 날아갑니다. [속도 : {2}]".\
              format(name, location, self.flying_speed))
        
class FlyableAttackUnit(AttackUnit, Flyable) :
    def __init__(self, name, hp, damage, flying_speed) :
        AttackUnit.__init__(self, name, hp, damage, 0)
        Flyable.__init__(self, flying_speed)

    def move(self, location) :
        print("[공중 유닛 이동]")
        self.fly(self.name, location)

class Wraith(FlyableAttackUnit) :
    def __init__(self) :
        FlyableAttackUnit.__init__(self, "레이스", 80, 20, 5)
        self.clocked = False #클로킹 모드(해제 상태)

    def clocking(self) :
        if self.clocked == True :
            print("{0} : 클로킹 모드를 해제합니다.".format(self.name))
            self.clocked = False

        else :
            print("{0} : 클로킹 모드를 설정합니다.".format(self.name))
            self.clocked = True
---------------------------------------------------------------------
<스타크래프트 후반전>
from random import *

class Unit :
    def __init__(self, name, hp, speed) :
        self.name = name
        self.hp = hp
        self.speed = speed
        print("{0} 유닛이 생성되었습니다.".format(self.name))

    def move(self, location) :
        print("{0} : {1} 방향으로 이동합니다. [속력 : {2}]".\
              format(self.name, location, self.speed))
        
    def damaged(self, damage) :
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 체력이 {1} 남았습니다.".format(self.name, self.hp))
        if self.hp <= 0 :
            print("{0} : 파괴되었습니다.".format(self.name))
     

class AttackUnit(Unit) :
    def __init__(self, name, hp, damage, speed) :
        Unit.__init__(self, name, hp, speed)
        self.damage = damage

    def attack(self, location) :
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 : {2}]".\
              format(self.name, location, self.damage))
        
class Marine(AttackUnit) :
    def __init__(self) :
        AttackUnit.__init__(self, "마린", 40, 5, 1)

    def stimpack(self) :
        if self.hp > 10 :
            self.hp -= 10
            print("{0} : 스팀팩을 사용합니다. (HP 10 감소)".format(self.name))
        else :
            print("{0} : 체력이 부족하여 스팀팩을 사용하지 않습니다.".format(self.name))

class Tank(AttackUnit) :
    seize_developed = False   #t시즈모드 개발 여부
    def __init__(self) :
        AttackUnit.__init__(self, "탱크", 150, 35, 1)
        self.seize_mode = False

    def set_seize_mode(self) :
        if Tank.seize_developed == False :
            return
            
        if self.seize_mode == False :
            print("{0} : 시즈 모드로 전환합니다.".format(self.name))
            self.damage *= 2
            self.seize_mode = True
        else :
            print("{0} : 시즈 모드를 해제합니다.".format(self.name))
            self.damage /= 2
            self.seize_mode = False



class Flyable() :
    def __init__(self, flying_speed) :
        self.flying_speed = flying_speed

    def fly(self, name, location) :
        print("{0} : {1} 방향으로 날아갑니다. [속도 : {2}]".\
              format(name, location, self.flying_speed))
        
class FlyableAttackUnit(AttackUnit, Flyable) :
    def __init__(self, name, hp, damage, flying_speed) :
        AttackUnit.__init__(self, name, hp, damage, 0)
        Flyable.__init__(self, flying_speed)

    def move(self, location) :
        self.fly(self.name, location)

class Wraith(FlyableAttackUnit) :
    def __init__(self) :
        FlyableAttackUnit.__init__(self, "레이스", 80, 20, 5)
        self.clocked = False #클로킹 모드(해제 상태)

    def clocking(self) :
        if self.clocked == True :
            print("{0} : 클로킹 모드를 해제합니다.".format(self.name))
            self.clocked = False

        else :
            print("{0} : 클로킹 모드를 설정합니다.".format(self.name))
            self.clocked = True

def game_start() :
    print("[알림] 새로운 게임을 시작합니다.")

def game_over() :
    print("Player : gg")
    print("[Player] 님이 게임에서 퇴장하셨습니다.")

#실제 게임 시작
game_start()

#마린 3기 생성
m1 = Marine()
m2 = Marine()
m3 = Marine()
#탱크 2기 생성
t1 = Tank()
t2 = Tank()

#레이스 1기 생성
w1 = Wraith()

#유닛 일괄 관리(생성된 모든 유닛 append)
attack_units = []
attack_units.append(m1)
attack_units.append(m2)
attack_units.append(m3)
attack_units.append(t1)
attack_units.append(t2)
attack_units.append(w1)

#전군 이동
for unit in attack_units :
    unit.move("1시")

#탱크 시즈모드 개발
Tank.seize_developed = True
print("[알림] 탱크 시즈 모드 개발이 완료되었습니다.")

#공격 모드 준비 (탱크 : 시즈모드, 레이스 : 클로킹, 마린 : 스팀팩)
for unit in attack_units :
    if isinstance(unit, Marine) :    #현재 유닛이 마린이면 스팀팩을 쓰라는 의미
        unit.stimpack()
    elif isinstance(unit, Tank) :
        unit.set_seize_mode()
        
    elif isinstance(unit, Wraith) :
        unit.clocking()

#전군 공격
for unit in attack_units :
    unit.attack("1시")

#전군 피해
for unit in attack_units :
    unit.damaged(randint(5, 20)) #공격은 랜덤으로 받음(5 ~ 20)

#게임 종료
game_over()
---------------------------------------------------------------
<퀴즈>
주어진 코드를 활용하여 부동산 프로그램을 작성하시오

(출력 예제)
총 3대의 매물이 있습니다.
강남 아파트 매매 10억 2010년
마포 오피스텔 전세 5억 2007년
송파 빌라 월세 500/50 2000년

[코드]
class House :
    #매물 초기화
    def __init__(self, location, house_type, deal_type, price, completion_year) :
        pass

    #매물 정보 표시
    def show_detail(self) :
        pass

<풀이>
class House() :
    def __init__(self, location, house_type, deal_type, price, completion_year) :
        self.location = location
        self.house_type = house_type
        self.deal_type = deal_type
        self.completion_year = completion_year
    
    def show_detail(self) :
        print(self.location, self.house_type, self.deal_type, self.completion_year)


house1 = House("강남", "아파트", "매매", "10억", "2010년")
house2 = House("마포", "오피스텔", "전세", "5억", "2007년")
house3 = House("송파", "빌라", "월세", "500/50", "2007년")

houses = []
houses.append(house1)
houses.append(house2)
houses.append(house3)

print("총 {0}대의 매물이 있습니다.".format(len(houses)))
for house in houses :
    house.show_detail()
--------------------------------------------------------
<예외처리>
print("나누기 전용 계산기입니다.")
num1 = int(input("첫 번째 숫자를 입력하세요"))
num2 = int(input("두 번째 숫자를 입력하세요"))
print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))

try :
    print("나누기 전용 계산기입니다.")
    num1 = int(input("첫 번째 숫자를 입력하세요"))
    num2 = int(input("두 번째 숫자를 입력하세요"))
    print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
except ValueError :
    print("에러! 잘못된 값을 입력했습니다.")

except ZeroDivisionError as err :
    print(err)



----
try :
    print("나누기 전용 계산기입니다.")
    nums = []
    nums.append(int(input("첫 번째 숫자를 입력하세요")))
    nums.append(int(input("두 번째 숫자를 입력하세요")))
    #nums.append(int(nums[0] / nums[1])) 만약 이것을 안 적었다면
    print("{0} / {1} = {2}".format(nums[0], nums[1], nums[2]))
except ValueError :
    print("에러! 잘못된 값을 입력했습니다.")

except ZeroDivisionError as err :
    print(err)
except Exception as err : #어떤 에러인지 알고 싶다면...
    print("알 수 없는 에러가 발생하였습니다.")  #나머지 에러는 여기서 처리
    print(err)

-----------------------------------------------------------------------
<에러 발생시키키> --> 너무 어려움
try :
    print("한 자리 숫자 나누기 전용 계산기입니다.")
    num1 = int(input("첫 번째 숫자를 입력하세요 :"))
    num2 = int(input("두 번째 숫자를 입력하세요 :"))
    if num1 >= 10 or num2 >= 10 :
        raise ValueError
    print("{0} / {1} = {2}".format(num1, num2, int(num1 / num2)))
except ValueError :
    print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요")

<사용자 정의 에러처리>
class BigNumberError(Exception) :
    def __init__(self, msg) :
        self.msg = msg

    def __str__(self) :
        return self.msg

try :
    print("한 자리 숫자 나누기 전용 계산기입니다.")
    num1 = int(input("첫 번째 숫자를 입력하세요"))
    num2 = int(input("두 번째 숫자를 입력하세요"))
    if num1 >= 10 or num2 >= 10 :
        raise BigNumberError("입력값 : {0}, {1}".format(num1, num2))
    print("{0} / {1} = {2}".format(num1, num2, int(num1 / num2)))
except ValueError :
    print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요")
except BigNumberError as err :
    print("에러가 발생하였습니다. 한 자리 숫자만 입력하세요")
    print(err)
------------------------------------------------
<finally> -> 무조건 실행되는 것
class BigNumberError(Exception) :
    def __init__(self, msg) :
        self.msg = msg
    
    def __str__(self) :
        return self.msg


try :
    print("한 자리 숫자 나누기 전용 계산기입니다.")
    num1 = int(input("첫 번째 숫자를 입력하세요 :"))
    num2 = int(input("두 번째 숫자를 입력하세요 :"))
    if num1 >= 10 or num2 >= 10 :
        raise BigNumberError("입력값 : {0}, {1}".format(num1, num2))
    print("{0} / {1} = {2}".format(num1, num2, num1 / num2))
except ValueError :
    print("잘못된 값을 입력했습니다. 한 자리 숫자만 입력하세요")
except BigNumberError as err :
    print("에러가 발생하였습니다. 한 자리 숫자만 입력하세요")
    print(err)
finally :
    print("계산기를 이용해 주셔서 감사합니다.")
--------------------------------------------------------------
<모듈>
theater_module.py 파일을 생성성

#일반 가격
def price(people) :
    print("{0}명 가격은 {1}원입니다.".format(people, people * 10000))

#조조할인 가격
def price_morning(people) :
    print("{0}명 조조 할인 가격은 {1}원입니다.".format(people, people * 6000))

#군인 할인 가격
def price_soldier(people) :
    print("{0}명 군인 할인 가격은 {1}원입니다.".format(people, people * 4000))

practice.py 파일에서
# import theater_module
# theater_module.price(3)
# theater_module.price_morning(4)
# theater_module.price_soldier(5)

# import theater_module as mv  #mv와 같은 별명을 사용해서 간편하게 사용 가능능
# mv.price(3)
# mv.price_morning(4)
# mv.price_soldier(3)

# from theater_module import *
# price(3)
# price_morning(4)
# price_soldier(5)

from theater_module import price, price_morning
# price(5)
# price_morning(6)
# price_soldeir(7) #오류 발생(쓸 수 없음)

from theater_module import price_soldier as price
price(5)

------------------------------------------------------------
<패키지> 5:24:33
패키지는 모듈을 모아놓은 집합이라고 보면 됨.
1. travel이라는 폴더를 만듦
2. travel 하위 폴더에 thailand.py / vietnam.py / __init__.py 페이지 만듦
3. 각 폴더에 class ThailandPackage :
    def detail(self) :
        print("[태국 패키지 3박 5일] 방콕, 파탸야 여행(야시장 투어) 50만원")

    class VietnampPackage :
    def detail(self) :
        print("[베트남 패키지 3박 5일] 다낭 효도 여행 60만원") 작성

4. # import travel.thailand
# trip_to = travel.thailand.ThailandPackage()
# trip_to.detail()

# from travel import vietnam
# trip_to = vietnam.Vietnampackage()
# trip_to.detail()

#__init__.py에다가 __all__ = ["vietnam", "thailand"]을 작성한 후 아래처럼 코드 작성 -> 오류 해결
from travel import *
trip_to = thailand.ThailandPackage()
trip_to.detail()
from travel import *
trip_to = vietnam.Vietnampackage()
trip_to.detail()
-------------------------------------------------------
<외부에서 모듈 호출>
thailand 파일에서 작성
class ThailandPackage :
    def detail(self) :
        print("[태국 패키지 3박 5일] 방콕, 파탸야 여행(야시장 투어) 50만원")


if __name__ == "__main__" : #네임이 메인이면
    print("Thailand 모듈을 직접 실행")
    print("이 문장은 모듈을 직접 실행할 때만 실행돼요")
    trip_to = ThailandPackage()
    trip_to.detail()
else :
    print("Thailand 외부에서 모듈 호출")

practice 파일에서 코드 작성
from travel import *
trip_to = thailand.ThailandPackage()
trip_to.detail()
-----------------------------------------------------------
<pip install> 5:43:20부터 다시 -> 이건 강의로 보는 게 나음
---------------------------------------------------------
<내장 함수>
#dir : 어떤 객체를 넘겨줬을 때 그 객체가 어떤 변수와 함수를 가지고 있는지 표시
# import random
# print(dir(random))

# lst = [1,2,3]
# print(dir(lst))

name = "Jim"
print(dir(name))

구글에 list of python builtins라고 치면 사이트 들어가서 내장함수를 볼 수 있음
------------------------------------------------------------
<외장 함수>
list of python modules에 들어가면 외장 함수를 볼 수 있음

#glob : 경로 내의 폴더 / 파일 목록 조회(윈도우 dir)
# import glob
# print(glob.glob("*.py")) #py로 끝나는 모든 파일에 대해 알려달라는 뜻

# os : 운영체제에서 제공하는 기본 기능
# import os
# print(os.getcwd()) #현재 디렉토리를 표시해달라는 의미

# folder = "sample_dir"

# if os.path.exists(folder):
#     print("이미 존재하는 폴더입니다.")
#     os.rmdir(folder)
#     print(folder, "폴더를 삭제하였습니다.")
# else :
#     os.makedirs(folder) #폴더생성
#     print(folder, "폴더를 생성하였습니다.")

# print(os.listdir())

# import time #time은 시간 관련 함수
# print(time.localtime())
# print(time.strftime("%Y-%m-%d %H:%M:%S"))

import datetime
# print("오늘 날짜는 ", datetime.date.today())

#timedelta : 두 날짜 사이의 간격
today = datetime.date.today() #오늘 날짜 저장
td = datetime.timedelta(days = 100) #100일 저장
print("우리가 만난지 100일은", today + td)
